---
type CopyClipboard = {
	className?: string;
	onCopy?: (text: string | undefined, result: boolean) => void;
	options?: {
		debug: boolean;
		message: string;
		format: string;
	};
};
const onNotFocusClasses = [
	'text-white',
	'transition',
	'duration-100',
	'ease-linear',
	'hover:text-red-500',
];
const onFocusClasses = ['text-green-500'];

const { className, options, onCopy } = Astro.props as CopyClipboard;
---

<clipboard-copy
	class:list={[className, ...onNotFocusClasses]}
	onCopy={onCopy}
	options={JSON.stringify(options)}
	onFocusClasses={JSON.stringify(onFocusClasses)}
	onNotFocusClasses={JSON.stringify(onNotFocusClasses)}
>
	<slot />
</clipboard-copy>

<script>
	class ClipboardCopy extends HTMLElement {
		options?: { debug: boolean; message: string; format: string };
		onCopy?: ((text: string | undefined, result: boolean) => void) | undefined;
		onFocusClasses: string[];
		onNotFocusClasses: string[];
		constructor() {
			super();

			this.onFocusClasses = this.parseInput(this.getAttribute('onFocusClasses') || '[]');

			this.onNotFocusClasses = this.parseInput(this.getAttribute('onNotFocusClasses') || '[]');

			this.options = this.parseInput(this.getAttribute('options') || '{}');

			this.onCopy = this.getAttribute('onCopy')
				? eval(`(${this.getAttribute('onCopy')})`)
				: undefined;

			this.addEventListener('click', async () => {
				const pre = this.closest(':has(pre)')?.querySelector('pre');
				if (pre && pre.textContent) {
					await navigator.clipboard.writeText(pre.textContent);
					this.setCopy();
				} else {
					console.error('No pre found for clipboard-copy', this, pre);
					throw new Error('No pre found for clipboard-copy');
				}
			});
		}

		setCopy() {
			this.toggleClassNames(this.onNotFocusClasses, this.onFocusClasses);
			const timer = setTimeout(() => {
				this.toggleClassNames(this.onFocusClasses, this.onNotFocusClasses);
			}, 3000);
			() => clearTimeout(timer);
		}

		parseInput(input: string) {
			return JSON.parse(input);
		}

		toggleClassNames(classesToRemove: string[], classesToAdd: string[]) {
			this.classList.remove(...classesToRemove);
			this.classList.add(...classesToAdd);
		}

		attributeChangedCallback(name: string, _: any, newValue: any) {
			if (name === 'options') {
				this.options = JSON.parse(newValue || '{}');
			} else if (name === 'onCopy') {
				this.onCopy = newValue ? eval(`(${newValue})`) : undefined;
			}
		}

		static get observedAttributes() {
			return ['options', 'onCopy'];
		}
	}

	customElements.define('clipboard-copy', ClipboardCopy);
</script>
